module PrimeSieve (    // Define a module to export
    sieve
)

@(Integral T)
fn sieve(lim: T) -> Array<T> {
    bools: bool[]    = stack![lim];      // We're not returning bools so we can
    primes: Array<T> = heap![0].init();  // allocate it on the stack.
    
    // stack[] and heap[] are used for any types where allocation is needed
    // (such as structs), so it gets the type (and consequently size) to
    // allocate from the type annotation (in this case, Array<T>)

    for i: int in 2 : lim {
        bools[i] = true;
    }

    for i: int in 2 : lim {
        if bools[i] {
            primes.append(i);

            for mul: int in 2*i : lim : i {
                bools[mul] = false;
            }
        }
    }

    return primes;
}
